// src/main/java/com/example/demo/entity/User.java

package com.example.demo.entity;

import jakarta.persistence.*;
import lombok.Data;

/**
 * This is the JPA entity representing a User in the database.
 * It stores username, password (hashed), and role for authentication and authorization.
 * We're using Lombok's @Data for getters, setters, toString, etc., to reduce boilerplate.
 * Note: In a real app, you might use a separate Role entity with ManyToMany for multiple roles.
 */
@Entity
@Table(name = "users")  // Table name in PostgreSQL
@Data
public class User {

    /**
     * Primary key, auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Username for login, must be unique.
     */
    @Column(unique = true, nullable = false)
    private String username;

    /**
     * Hashed password (using BCrypt).
     * Never store plain text!
     */
    @Column(nullable = false)
    private String password;

    /**
     * User role, e.g., "USER" or "ADMIN".
     * For simplicity, single role as a string; Spring Security will convert to GrantedAuthority.
     */
    @Column(nullable = false)
    private String role;

}